name: Java CI with Maven

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened, closed]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github  # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }}  # location for the settings.xml file

      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Publish to GitHub Packages Apache Maven
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Post PR status comment
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const checklist = [
              { name: 'Checkout code', status: '${{ job.status }}' },
              { name: 'Set up JDK 21', status: '${{ job.status }}' },
              { name: 'Cache Maven packages', status: '${{ job.status }}' },
              { name: 'Build with Maven', status: '${{ job.status }}' },
              { name: 'Publish to GitHub Packages Apache Maven', status: '${{ job.status }}' }
            ];

            let checklistText = '### Job Status Checklist\n';
            checklist.forEach(item => {
              if (item.status === 'success') {
                checklistText += `- [x] ${item.name}\n`;
              } else {
                checklistText += `- [ ] ${item.name}\n`;
              }
            });

            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            
            await github.issues.createComment({
              issue_number: prNumber,
              owner: repo.owner,
              repo: repo.repo,
              body: checklistText
            });
